gt = extract.gt(vcf)
head(gt)
vcf
head(vcf)
test=extract.info(vcf,'QUAL')
head(test)
vcf@info
vcd@meta
vcf@meta
test=extract.info(vcf,'AF')
head(test)
maf(vcf)
minor.af=maf(vcf)
head(minor.af)
hist(minor.af$Frequency)
str(minor.af)
hist(minor.af)
hist(minor.af,breaks=50)
head(extract.gt(vcf))
head(extract.gt(vcf,as.numeric=T))
head(gt)
test=ifelse(gt=='0/0',0,ifelse(gt=='0/1',1,ifelse(gt=='1/1',1,NA)))
head(test)
?cor
cc=cor(test,method='complete.pairwise.obs')
cc=cor(test,use='pairwise.complete.obs')
head(cc)
dim(cc)
heatmap(cc)
devtools::install_github("Artjom-Metro/tidygenomics")
library(tidygenomics)
gffRead <- function(gffFile, nrows = -1) {
cat("Reading ", gffFile, ": ", sep="")
gff = read.table(gffFile, sep="\t", as.is=TRUE, quote="",
header=FALSE, comment.char="#", nrows = nrows,
colClasses=c("character", "character", "character", "integer",
"integer",
"character", "character", "character", "character"))
colnames(gff) = c("seqname", "source", "feature", "start", "end",
"score", "strand", "frame", "attributes")
cat("found", nrow(gff), "rows with classes:",
paste(sapply(gff, class), collapse=", "), "\n")
stopifnot(!any(is.na(gff$start)), !any(is.na(gff$end)))
return(gff)
}
getAttributeField <- function (x, field, attrsep = ";") {
s = strsplit(x, split = attrsep, fixed = TRUE)
sapply(s, function(ats) {
a = strsplit(atts, split = "=", fixed = TRUE)
m = match(field, sapply(a, "[", 1))
if (!is.na(m)) {
rv = a[[m]][2]
}
else {
rv = as.character(NA)
}
return(rv)
})
}
library(plyr)
library(dplyr)
input.gff=gffRead('Desktop/Zea_mays.AGPv4.35.gff3'_)
input.gff=gffRead('Desktop/Zea_mays.AGPv4.35.gff3')
head(input.gff)
getAttributeField(input.gff)
?getAttributeField
input.gff$attributes[1]
input.gff$attributes[2]
input.gff$attributes[2]
gff.cds = input.gff %>% filter(feature=='CDS') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
input.gff %>% filter(feature=='CDS')
gff.cds = input.gff %>% filter(feature=='CDS') %>% mutate(parent=getAttributeField(attributes, "Parent"))
getAttributeField <- function (x, field, attrsep = ";") {
s = strsplit(x, split = attrsep, fixed = TRUE)
sapply(s, function(atts) {
a = strsplit(atts, split = "=", fixed = TRUE)
m = match(field, sapply(a, "[", 1))
if (!is.na(m)) {
rv = a[[m]][2]
}
else {
rv = as.character(NA)
}
return(rv)
})
}
gff.cds = input.gff %>% filter(feature=='CDS') %>% mutate(parent=getAttributeField(attributes, "Parent"))
gff.cds = input.gff %>% filter(feature=='CDS') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
head(gff.cds)
gff.cds = input.gff %>% filter(feature=='CDS') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.chromosome = input.gff %>% filter(feature=='chromosome') %>% mutate(name=getAttributeField(attributes,"Name")) %>% select(seqname, start, end, feature, feature, strand, frame, name, -attributes)
gff.contig = input.gff %>% filter(feature=='contig') %>% mutate(name=getAttributeField(attributes,"Name"),id=getAttributeField(attributes,"ID"),note=getAttributeField(attributes,"Note")) %>% select(seqname, start, end, name, feature, strand, frame, note,-attributes)
gff.exon = input.gff %>% filter(feature=='exon') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.five_prime_UTR = input.gff %>% filter(feature=='five_prime_UTR') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.gene = input.gff %>% filter(feature=='gene') %>% mutate(name=getAttributeField(attributes,"Name"),id=getAttributeField(attributes,"ID"),note=getAttributeField(attributes,"Note")) %>% select(seqname, start, end, name, feature, strand, frame, note,-attributes)
gff.lincRNA = input.gff %>% filter(feature=='lincRNA') %>% mutate(name=getAttributeField(attributes,"Name"),id=getAttributeField(attributes,"ID"),note=getAttributeField(attributes,"Note")) %>% select(seqname, start, end, name, feature, strand, frame, note,-attributes)
gff.lincRNA_gene = input.gff %>% filter(feature=='lincRNA_gene') %>% mutate(name=getAttributeField(attributes,"Name"),id=getAttributeField(attributes,"ID"),note=getAttributeField(attributes,"Note")) %>% select(seqname, start, end, name, feature, strand, frame, note,-attributes)
gff.miRNA = input.gff %>% filter(feature=='miRNA') %>% mutate(name=getAttributeField(attributes,"Name"),parent=getAttributeField(attributes,'Parent')) %>% select(seqname, start, end, name, feature, strand, frame, parent,-attributes)
gff.mRNA = input.gff %>% filter(feature=='mRNA') %>% mutate(name=getAttributeField(attributes,"Name"),parent=getAttributeField(attributes,'Parent')) %>% select(seqname, start, end, name, feature, strand, frame, parent,-attributes)
gff.three_prime_UTR = input.gff %>% filter(feature=='three_prime_UTR') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.transcript = input.gff %>% filter(feature=='transcript') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.tRNA_gene = input.gff %>% filter(feature=='tRNA_gene') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
head(input.gff %>% filter(feature=='lincRNA'))
head(input.gff %>% filter(feature=='lincRNA_gene'))
head(gff.gene)
gff.gene = input.gff %>% filter(feature=='gene') %>% mutate(name=getAttributeField(attributes,"gene_id"),id=getAttributeField(attributes,"ID"),note=getAttributeField(attributes,"Note")) %>% select(seqname, start, end, name, feature, strand, frame, note,-attributes)
head(gff.gene)
head(inputgff %>% filter(feature=='miRNA'))
head(input.gff %>% filter(feature=='miRNA'))
head(input.gff %>% filter(feature=='mRNA'))
head(input.gff %>% filter(feature=='three_prime_UTR'))
head(input.gff %>% filter(feature=='transcript'))
head(input.gff %>% filter(feature=='tRNA_gene'))
gff.cds = input.gff %>% filter(feature=='CDS') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.chromosome = input.gff %>% filter(feature=='chromosome') %>% mutate(name=getAttributeField(attributes,"Name")) %>% select(seqname, start, end, feature, feature, strand, frame, name, -attributes)
gff.contig = input.gff %>% filter(feature=='contig') %>% mutate(name=getAttributeField(attributes,"Name"),id=getAttributeField(attributes,"ID"),note=getAttributeField(attributes,"Note")) %>% select(seqname, start, end, name, feature, strand, frame, note,-attributes)
gff.exon = input.gff %>% filter(feature=='exon') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.five_prime_UTR = input.gff %>% filter(feature=='five_prime_UTR') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.gene = input.gff %>% filter(feature=='gene') %>% mutate(name=getAttributeField(attributes,"gene_id"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame, note,-attributes)
gff.lincRNA = input.gff %>% filter(feature=='lincRNA') %>% mutate(name=getAttributeField(attributes,"Parent"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame, note,-attributes)
gff.lincRNA_gene = input.gff %>% filter(feature=='lincRNA_gene') %>% mutate(name=getAttributeField(attributes,"gene_id"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame, note,-attributes)
gff.miRNA = input.gff %>% filter(feature=='miRNA') %>% mutate(name=getAttributeField(attributes,"transcript_id"),parent=getAttributeField(attributes,'Parent')) %>% select(seqname, start, end, name, feature, strand, frame, parent,-attributes)
gff.mRNA = input.gff %>% filter(feature=='mRNA') %>% mutate(name=getAttributeField(attributes,"trainscript_id"),parent=getAttributeField(attributes,'Parent')) %>% select(seqname, start, end, name, feature, strand, frame, parent,-attributes)
gff.three_prime_UTR = input.gff %>% filter(feature=='three_prime_UTR') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.transcript = input.gff %>% filter(feature=='transcript') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.tRNA_gene = input.gff %>% filter(feature=='tRNA_gene') %>% mutate(parent=getAttributeField(attributes, "gene_id")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.cds = input.gff %>% filter(feature=='CDS') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.chromosome = input.gff %>% filter(feature=='chromosome') %>% mutate(name=getAttributeField(attributes,"Name")) %>% select(seqname, start, end, feature, feature, strand, frame, name, -attributes)
gff.contig = input.gff %>% filter(feature=='contig') %>% mutate(name=getAttributeField(attributes,"Name"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame,-attributes)
gff.exon = input.gff %>% filter(feature=='exon') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.five_prime_UTR = input.gff %>% filter(feature=='five_prime_UTR') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.gene = input.gff %>% filter(feature=='gene') %>% mutate(name=getAttributeField(attributes,"gene_id"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame,-attributes)
gff.lincRNA = input.gff %>% filter(feature=='lincRNA') %>% mutate(name=getAttributeField(attributes,"Parent"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame,-attributes)
gff.lincRNA_gene = input.gff %>% filter(feature=='lincRNA_gene') %>% mutate(name=getAttributeField(attributes,"gene_id"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame,-attributes)
gff.miRNA = input.gff %>% filter(feature=='miRNA') %>% mutate(name=getAttributeField(attributes,"transcript_id"),parent=getAttributeField(attributes,'Parent')) %>% select(seqname, start, end, name, feature, strand, frame, parent,-attributes)
gff.mRNA = input.gff %>% filter(feature=='mRNA') %>% mutate(name=getAttributeField(attributes,"trainscript_id"),parent=getAttributeField(attributes,'Parent')) %>% select(seqname, start, end, name, feature, strand, frame, parent,-attributes)
gff.three_prime_UTR = input.gff %>% filter(feature=='three_prime_UTR') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.transcript = input.gff %>% filter(feature=='transcript') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.tRNA_gene = input.gff %>% filter(feature=='tRNA_gene') %>% mutate(parent=getAttributeField(attributes, "gene_id")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
ls
ls()
names(table(input.gff$feature))
gff.miRNA = input.gff %>% filter(feature=='miRNA_gene') %>% mutate(name=getAttributeField(attributes,"transcript_id"),parent=getAttributeField(attributes,'Parent')) %>% select(seqname, start, end, name, feature, strand, frame, parent,-attributes)
gff.cds = input.gff %>% filter(feature=='CDS') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.chromosome = input.gff %>% filter(feature=='chromosome') %>% mutate(name=getAttributeField(attributes,"Name")) %>% select(seqname, start, end, feature, feature, strand, frame, name, -attributes)
gff.contig = input.gff %>% filter(feature=='contig') %>% mutate(name=getAttributeField(attributes,"Name"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame,-attributes)
gff.exon = input.gff %>% filter(feature=='exon') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.five_prime_UTR = input.gff %>% filter(feature=='five_prime_UTR') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.gene = input.gff %>% filter(feature=='gene') %>% mutate(name=getAttributeField(attributes,"gene_id"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame,-attributes)
gff.lincRNA = input.gff %>% filter(feature=='lincRNA') %>% mutate(name=getAttributeField(attributes,"Parent"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame,-attributes)
gff.lincRNA_gene = input.gff %>% filter(feature=='lincRNA_gene') %>% mutate(name=getAttributeField(attributes,"gene_id"),id=getAttributeField(attributes,"ID")) %>% select(seqname, start, end, name, feature, strand, frame,-attributes)
gff.miRNA = input.gff %>% filter(feature=='miRNA') %>% mutate(name=getAttributeField(attributes,"transcript_id"),parent=getAttributeField(attributes,'Parent')) %>% select(seqname, start, end, name, feature, strand, frame, parent,-attributes)
gff.miRNA_gene = input.gff %>% filter(feature=='miRNA_gene') %>% mutate(name=getAttributeField(attributes,"transcript_id"),parent=getAttributeField(attributes,'Parent')) %>% select(seqname, start, end, name, feature, strand, frame, parent,-attributes)
gff.three_prime_UTR = input.gff %>% filter(feature=='three_prime_UTR') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.transcript = input.gff %>% filter(feature=='transcript') %>% mutate(parent=getAttributeField(attributes, "Parent")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
gff.tRNA_gene = input.gff %>% filter(feature=='tRNA_gene') %>% mutate(parent=getAttributeField(attributes, "gene_id")) %>% select(seqname, start, end, parent, feature, strand, frame,-attributes)
#write them all out to bed files
write.table(gff.cds,'Zmays_cds.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.chromosome,'Zmays_chromosome.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.contig,'Zmays_contig.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.exon,'Zmays_exon.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.five_prime_UTR,'Zmays_five_prime_UTR.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.gene,'Zmays_gene.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.lincRNA,'Zmays_lincRNA.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.lincRNA_gene,'Zmays_lincRNA_gene.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.miRNA,'Zmays_miRNA.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.miRNA_gene,'Zmays_miRNA_gene.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.three_prime_UTR,'Zmays_three_prime_UTR.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.transcript,'Zmays_transcript.bed',sep='\t',row.names=F,col.names=F,quote=F)
write.table(gff.tRNA_gene,'Zmays_tRNA_gene.bed',sep='\t',row.names=F,col.names=F,quote=F)
install.packages('vcfR')
library(vcfR)
all=read.delm('Desktop/CG_alltiles_merged.2017-05-03 09:41:15.txt',head=T,nrow=500000)
all=read.delim('Desktop/CG_alltiles_merged.2017-05-03 09:41:15.txt',head=T,nrow=500000)
head(all)
tail(all$V1)
tail(all$V2)
library(tidygenomics)
a=seq(1,73000000, by=1000000)
a
b=seq(1000000,74000000,by=1000000)
b
b=seq(1000000,73000000,by=1000000)
c=seq(1:length(a))
windows=cbind.data.frame(c,a,b)
head(windows)
i=1
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
library(fields)
head(temp)
temp.cor=cor(temp[,4:ncol(temp)])
temp.cor
temp.cor=cor(t(temp[,4:ncol(temp)]))
dim(temp.cor)
temp.cor=cor(temp[,4:ncol(temp)])
dim(temp.cor)
mantel()
out=list(NA)
out[i]=temp.cor
out[[i]]=temp.cor
out=list(NA)
for(i in length(a)){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)])
out[[i]]=temp.cor
}
i
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)])
dim(temp.cor)
out=list(NA)
for(i in length(a)){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)])
out[[i]]=temp.cor
}
out[[1]]
out=list(NA)
i=1
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)])
dim(temp.cor)
temp.cor
?cor
temp.cor=cor(temp[,4:ncol(temp)],use='complete.pairwise.obs')
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
temp.cor
out[[i]]=temp.cor
i=2
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out[[i]]=temp.cor
out[[1]]
out[[2]]
out=list(NA)
for(i in length(a)){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out[[i]]=temp.cor
}
??mantel
??mantel.test
library(ape)
cor.all=cor(all[,4:ncol(all)],use='pairwise.complete.obs')
dim(cor.all)
mantel.test(cor.all,out[[1]])
dim(out[[1]])
out[[1]]
str(cor.all)
str(temp.cor)
mantel.test(as.matrix(cor.all),as.matrix(temp.cor))
mantel.test(as.matrix(cor.all),as.matrix(temp.cor))$z.stat
dim(out)
str(out)
out
out[[1]]
out[[2]]
out[[73]]
i
list(temp.cor)
arf=list(temp.cor)
arf[[1]]
arf[1]
i=12
i=1
out=list()
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out=c(out,temp.cor)
i=2
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out=c(out,temp.cor)
out[1]
out[2]
out
str(out)
unlist(out)
out=list()
out
out=list(NA)
out
out=list(NA)
for(i in 3){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out=c(out,temp.cor)
}
out
out[[1]]
out[1]
str(out)
out=list(NA)
for(i in 3){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out[i]=temp.cor
}
out
out=list()
for(i in 3){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out[[i]]=as.matrix(temp.cor)
}
out
out[[1]]
out[1]
out=data.frame(window=NA,z_stat=NA,p_val=NA)
for(i in 3){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
temp.mantel = mantel.test(as.matrix(cor.all),as.matrix(temp.cor))
out$window=i
out$z_stat=temp.mantel$z.stat
out$p_val=temp.mantel$p.val
}
out
temp.mantel
out=data.frame(window=NA,z_stat=NA,p_val=NA)
for(i in 3){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
temp.mantel = mantel.test(as.matrix(cor.all),as.matrix(temp.cor))
out$window=i
out$z_stat=temp.mantel$z.stat
out$p_val=temp.mantel$p
}
out
out=data.frame(window=NA,z_stat=NA,p_val=NA)
for(i in 3){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
temp.mantel = mantel.test(as.matrix(cor.all),as.matrix(temp.cor))
out[i,'window']=i
out[i,'z_stat']=temp.mantel$z.stat
out[i,'p_val']=temp.mantel$p
}
out
out[i,'window']
out[1,]
i
i=1
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
temp.mantel = mantel.test(as.matrix(cor.all),as.matrix(temp.cor))
out[i,'window']=i
out[i,'z_stat']=temp.mantel$z.stat
out[i,'p_val']=temp.mantel$p
out=data.frame(window=NA,z_stat=NA,p_val=NA)
for(i in 1:3){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
temp.mantel = mantel.test(as.matrix(cor.all),as.matrix(temp.cor))
out[i,'window']=i
out[i,'z_stat']=temp.mantel$z.stat
out[i,'p_val']=temp.mantel$p
}
out
out=list()
for(i in 1:3){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out[[i]]=as.matrix(temp.cor)
}
out
out[[1]]
out.test=data.frame(window=NA,z_stat=NA,p_val=NA)
for(i in 1:3){
temp.mantel = mantel.test(as.matrix(cor.all),as.matrix(out[[i]]))
out.test[i,'window']=i
out.test[i,'z_stat']=temp.mantel$z.stat
out.test[i,'p_val']=temp.mantel$p
}
out.test
out=list()
for(i in 1:length(a)){
temp=subset(all,all$V2>= a[i] & all$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out[[i]]=as.matrix(temp.cor)
}
out.test=data.frame(window=NA,z_stat=NA,p_val=NA)
for(i in 1:length(a)){
temp.mantel = mantel.test(as.matrix(cor.all),as.matrix(out[[i]]))
out.test[i,'window']=i
out.test[i,'z_stat']=temp.mantel$z.stat
out.test[i,'p_val']=temp.mantel$p
}
out.test
plot(out.test$z_stat)
table(all$V1)
head(all)
head(all[,1:3])
all=read.delim('Desktop/CG_alltiles_merged.2017-05-03 09:41:15.txt',head=T)
table(all$V1)
chrs=c('Bd1','Bd2','Bd3','Bd4','Bd5')
j=1
chr.temp=subset(all,all$V1==chrs[j])
a=seq(1,max(chr.temp$V2), by=1000000)
b=seq(1000000,max(chr.temp$V3),by=1000000)
c=seq(1:length(a))
windows=cbind.data.frame(c,a,b)
a=seq(1,max(chr.temp$V2), by=1000000)
b=seq(1000000,max(chr.temp$V3),by=1000000)
a=seq(1,max(chr.temp$V3), by=1000000)
b=seq(1000000,max(chr.temp$V3),by=1000000)
a
b
a=seq(1,max(chr.temp$V3), by=1000000)
a=a[1:length(a)-1]
b=seq(1000000,max(chr.temp$V3),by=1000000)
c=seq(1:length(a))
windows=cbind.data.frame(c,a,b)
windows
out=list()
for(i in 1:length(a)){
temp=subset(chr.temp,chr.temp$V2>= a[i] & chr.temp$V2 <= b[i])
temp.cor=cor(temp[,4:ncol(temp)],use='pairwise.complete.obs')
out[[i]]=as.matrix(temp.cor)
}
out.test=data.frame(window=NA,z_stat=NA,p_val=NA)
for(i in 1:length(a)){
temp.mantel = mantel.test(as.matrix(cor.all),as.matrix(out[[i]]))
out.test[i,'window']=i
out.test[i,'z_stat']=temp.mantel$z.stat
out.test[i,'p_val']=temp.mantel$p
}
out.test
plot(out.test$z_stat)
write.table(out.test,'Bd1_mantel_test.result',sep='\t',row.names=F,quote=F)
temp.mantel
summary(temp.mantel)
library(multicore)
install.packages('multicore')
library(parallel)
mcapply()
library(foreach)
?mantel.test
cor(as.matrix(cor.all),as.matrix)out[[i]])
cor(as.matrix(cor.all),as.matrix(out[[i]]))
summary(out.test$p_val)
install.packages('pwr')
library(pwr)
pwr.f2.test()
pwr.t.test(n=604,sig.level=0.01,power=0.8)
pwr.t.test(n=6,sig.level=0.01,power=0.8)
pwr.t.test(n=6000,sig.level=0.01,power=0.8)
pwr.t.test(n=302,sig.level=0.01,power=0.8)
pwr.t.test(n=3,sig.level=0.01,power=0.8)
library(ggplot2)
ggplot(out.test,aes(window,z_stat)) + geom_line()
?apply
plot(cor.all)
library(corplot)
install.packages('corrplot')
library(corplot)
library(corrplot)
corrplot(cor.all)
filelist=S60084_wgbspipeline_2017-05-05-16-05-12/5_output_files/S60084_CpG.bed.bismark.cov
filelist='S60084_wgbspipeline_2017-05-05-16-05-12/5_output_files/S60084_CpG.bed.bismark.cov'
filelist[1]
gsub ('.fastq.gz*','',filelist[1])
gsub ('_wgbs*','',filelist[1])
?gsub
gsub ('_wgbs*','',filelist[1],perl=T)
gsub ('_wgbs.*','',filelist[1],perl=T)
gsub ('_wgbs.*','',filelist[1],perl=T)
gsub ('_wgbs.*','',filelist[1])
library(vcfR)
?vcfR
data=read.vcfR('Desktop/BdTR9X.vcf')
head(data)
plot(data)
maf(data)
chrom=masker(chrom,min_QUAL=10, min_DP=1)
chrom=masker(data,min_QUAL=10, min_DP=1)
setwd("~/Desktop/test")
library(rhdf5)
h5createFile('test_cov.h5')
h5createGroup('test_cov.h5','positions')
h5createGroup('test_cov.h5','met')
h5createGroup('test_cov.h5','unmet')
pos=read.delim('master_positions',head=F,stringsAsFactors = F,col.names=c('chrom','position'))
pos=read.delim('pos.1000',head=F,stringsAsFactors = F,col.names=c('chrom','position'))
h5write(pos,file='test_cov.h5',name='/positions/positions')
files=dir(pattern='*cov')
sid=matrix(unlist(strsplit(files,'\\.')),ncol=7,byrow=T)[,1]
files=dir(pattern='*cov.1000')
sid=matrix(unlist(strsplit(files,'\\.')),ncol=7,byrow=T)[,1]
h5createDataset('test_cov.h5','met/met',c(nrow(pos),604),storage.mode='integer',chunk=c(5,1),level=7)
h5createDataset('test_cov.h5','unmet/unmet',c(nrow(pos),604),storage.mode='integer',chunk=c(5,1),level=7)
for(i in 1:length(files)){
d1=read.delim(files[i],head=F)
merged=merge(pos,d1[,c(1,2,5,6)],by.x=c('chrom','position'),by.y=c('V1','V2'),all.x=T)
h5write(matrix(merged[,3],nc=1),file='test_cov.h5',name='met/met', start=c(1,i))
h5write(matrix(merged[,4],nc=1),file='test_cov.h5',name='unmet/unmet',start=c(1,i))
}
h5Close()
#
H5close()
setwd("~/Dropbox/Labwork/Eichten_Projects/BVZ0049_decra_pilot/clonal_brachypodium")
meta=read.delim('metadata.txt',head=T)
head(meta)
meta$Accession
library(tidyverse)
meta$Accession %>% unique()
uniq = meta$Accession %>% unique()
for(i in uniq){ meta[which(meta$Accession==i),1]}
i
meta[which(meta$Accession==i),1]
View(meta)
table(meta[,7])
